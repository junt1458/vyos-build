#!/usr/bin/env groovy
@NonCPS

// Using a version specifier library, use 'sagitta' branch. The underscore (_)
// is not a typo! You need this underscore if the line immediately after the
// @Library annotation is not an import statement!
@Library('vyos-build@sagitta')_
setDescription()

node('Docker') {
    stage('Setup Container') {
        script {
            // create container name on demand
            def branchName = getGitBranchName()
            if (branchName.equals('master'))
                branchName = 'sagitta'

            env.DOCKER_IMAGE = 'vyos/vyos-build:' + branchName

            // Get the sagitta UID and GID from the jenkins agent to allow use of the same UID inside Docker
            env.USR_ID = sh(returnStdout: true, script: 'id -u').toString().trim()
            env.GRP_ID = sh(returnStdout: true, script: 'id -g').toString().trim()
            env.DOCKER_ARGS = '--privileged --sysctl net.ipv6.conf.lo.disable_ipv6=0 -e GOSU_UID=' + env.USR_ID + ' -e GOSU_GID=' + env.GRP_ID
            env.BASE_VERSION = '1.4-stable-'
        }
    }
}

pipeline {
    agent {
        docker {
            label "Docker"
            args "${env.DOCKER_ARGS}"
            image "${env.DOCKER_IMAGE}"
            alwaysPull true
            reuseNode true
        }
    }
    triggers {
        cron('H 3 * * *')
    }
    parameters {
        string(name: 'BUILD_BY', defaultValue: 'jun@id.alice-kawaii.net', description: 'Builder identifier (e.g. jrandomhacker@example.net)')
        string(name: 'BUILD_VERSION', defaultValue: env.BASE_VERSION + 'ISO8601-TIMESTAMP', description: 'Version number (release builds only)')
    }
    options {
        disableConcurrentBuilds()
        timeout(time: 240, unit: 'MINUTES')
        timestamps()
        buildDiscarder(logRotator(numToKeepStr: '20'))
    }
    stages {
        stage('Build Packages') {
            when {
                beforeOptions true
                beforeAgent true
                // Only run ISO image build process of explicit user request or
                // once a night triggered by the timer.
                anyOf {
                    changeset pattern: "**/packages/**/Jenkinsfile"
                    triggeredBy cause: "UserIdCause"
                }
            }
            environment {
                PYTHONDONTWRITEBYTECODE = 1
            }
            steps {
                dir("packages/hostap") {
                    // Build one package (for CI test)
                    load("Jenkinsfile")
                }
            }
        }
    }
    post {
        success {
            script {
                // only deploy ISO if build from official repository
                if (isCustomBuild())
                    return
            }
        }
        failure {
            archiveArtifacts artifacts: '**/packages/*.deb,
                allowEmptyArchive: true
        }
        cleanup {
            echo 'One way or another, I have finished'
            // the 'build' directory got elevated permissions during the build
            // cdjust permissions so it can be cleaned up by the regular user
            sh 'sudo make purge'
            deleteDir() /* cleanup our workspace */
        }
    }
}
